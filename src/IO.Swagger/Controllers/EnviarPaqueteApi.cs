/*
 * API MTIS - OpenAPI 3.0
 *
 * Practica grupal  de MTIS de la Universidad de Alicante 2022-2023.  _Esta documentacion esta escrita en el Swagger Editor y con OpenAPI 3.0_  `Autor: Nikita Polyanskiy, Serhii Vidernikov, Robert Kazaryan, Víctor Hernández Justamante y Ángel Tamame Pérez`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Utils;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EnviarPaqueteApiController : ControllerBase
    { 
        /// <summary>
        /// Confirmar la recepcion del Paquete
        /// </summary>
        /// <remarks>Confirmamos la recepcion del Paquete en la oficina</remarks>
        /// <param name="idEnvio">Identificador del Envio</param>
        /// <param name="restKey">Api Key</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">Internal error</response>
        [HttpGet]
        [Route("/VHJ1_1/MTIS/1.0.0/EnviarPaquete/confirmar")]
        [ValidateModelState]
        [SwaggerOperation("EnviarPaqueteConfirmarPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Response), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Response), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Response), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 500, type: typeof(Response), description: "Internal error")]
        public virtual IActionResult EnviarPaqueteConfirmarPost([FromQuery][Required()]string idEnvio, [FromHeader]string restKey)
        {
            try
            {
                /*if (!ApiKeyAuth.Auth(restKey))
                {
                    Response response = new Response();

                    response.Status = "Unauthorized";
                    response.Message = "Falta el RestKey o es invalido";
                    return StatusCode(401, response);
                }*/
                DateTime fechaActual = DateTime.Now;
                if (DBUtils.DbModif("UPDATE envio SET estado='pendiente', idRepartidor=NULL, fechaRecepcion='" + fechaActual.ToString("yyyy-MM-dd") + "', entregaPrevista='" + fechaActual.AddDays(30).ToString("yyyy-MM-dd") + "' WHERE id='" + idEnvio.ToString() + "'"))
                {

                    Response response = new Response();
                    response.Status = "Success";
                    response.Message = "El paquete recibido el " + fechaActual.ToString("yyyy - MM - dd") + ", fecha de entrega prevista " + fechaActual.AddDays(30).ToString("yyyy-MM-dd");

                    return StatusCode(200, response);
                }
                else
                {
                    Response response = new Response();
                    response.Status = "Bad request";
                    response.Message = "No se ha podido confirmar la recepcion del paquete";
                    return StatusCode(400, response);
                }
            }
            catch (Exception)
            {
                Response response = new Response();
                response.Status = "Internal error";
                response.Message = "Algo ha ido mal";
                return StatusCode(500, response);
            }
        }

        /// <summary>
        /// Actualizar la fecha de la recogida del Paquete
        /// </summary>
        /// <remarks>Actualizamos la fecha de la recogida del Paquete por la ausencia del cliente</remarks>
        /// <param name="idEnvio">Identificador del Envio</param>
        /// <param name="restKey">Api Key</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        /// <response code="500">Internal error</response>
        [HttpGet]
        [Route("/VHJ1_1/MTIS/1.0.0/EnviarPaquete/fecha")]
        [ValidateModelState]
        [SwaggerOperation("EnviarPaqueteFechaPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Response), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Response), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Response), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(Response), description: "Not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Response), description: "Internal error")]
        public virtual IActionResult EnviarPaqueteFechaPut([FromQuery][Required()]string idEnvio, [FromHeader]string restKey)
        {
            try
            {
                /*if (!ApiKeyAuth.Auth(restKey))
                {
                    Response response = new Response();

                    response.Status = "Unauthorized";
                    response.Message = "Falta el RestKey o es invalido";
                    return StatusCode(401, response);
                }*/
                DateTime fechaActual = DateTime.Now.AddDays(5);
                if (DBUtils.DbModif("UPDATE envio SET fechaRecepcion='" + fechaActual.ToString("yyyy-MM-dd") + "' WHERE id='" + idEnvio.ToString() + "'"))
                {
                    Response response = new Response();
                    response.Status = "Success";
                    response.Message = fechaActual.ToString("yyyy-MM-dd");

                    return StatusCode(200, response);
                }
                else
                {
                    Response response = new Response();
                    response.Status = "Bad request";
                    response.Message = "No se ha podido actualizar la fecha de recogida del paquete";
                    return StatusCode(400, response);
                }
            }
            catch (Exception)
            {
                Response response = new Response();
                response.Status = "Internal error";
                response.Message = "Algo ha ido mal";
                return StatusCode(500, response);
            }
        }
    }
}
