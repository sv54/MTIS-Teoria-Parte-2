/*
 * API MTIS - OpenAPI 3.0
 *
 * Practica grupal  de MTIS de la Universidad de Alicante 2022-2023.  _Esta documentacion esta escrita en el Swagger Editor y con OpenAPI 3.0_  `Autor: Nikita Polyanskiy, Serhii Vidernikov, Robert Kazaryan, Víctor Hernández Justamante y Ángel Tamame Pérez`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Seguimiento : IEquatable<Seguimiento>
    { 
        /// <summary>
        /// Identificador del seguimiento.
        /// </summary>
        /// <value>Identificador del seguimiento.</value>
        [Required]

        [DataMember(Name="identificador")]
        public string Identificador { get; set; }

        /// <summary>
        /// Estado actual del seguimiento.
        /// </summary>
        /// <value>Estado actual del seguimiento.</value>
        [Required]

        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Indica si el seguimiento esta disponible para el cliente
        /// </summary>
        /// <value>Indica si el seguimiento esta disponible para el cliente</value>
        [Required]

        [DataMember(Name="acceso")]
        public bool? Acceso { get; set; }

        [DataMember(Name = "envioId")]
        public string envioId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Seguimiento {\n");
            sb.Append("  Identificador: ").Append(Identificador).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Acceso: ").Append(Acceso).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Seguimiento)obj);
        }

        /// <summary>
        /// Returns true if Seguimiento instances are equal
        /// </summary>
        /// <param name="other">Instance of Seguimiento to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Seguimiento other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identificador == other.Identificador ||
                    Identificador != null &&
                    Identificador.Equals(other.Identificador)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) && 
                (
                    Acceso == other.Acceso ||
                    Acceso != null &&
                    Acceso.Equals(other.Acceso)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identificador != null)
                    hashCode = hashCode * 59 + Identificador.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                    if (Acceso != null)
                    hashCode = hashCode * 59 + Acceso.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Seguimiento left, Seguimiento right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Seguimiento left, Seguimiento right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
